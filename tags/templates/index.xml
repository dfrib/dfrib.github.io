<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>templates on [unfold] Bits of awareness</title>
    <link>https://dfrib.github.io/tags/templates/</link>
    <description>Recent content in templates on [unfold] Bits of awareness</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Dec 2020 00:00:00 +0100</lastBuildDate><atom:link href="https://dfrib.github.io/tags/templates/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A foliage of folly</title>
      <link>https://dfrib.github.io/a-foliage-of-folly/</link>
      <pubDate>Mon, 07 Dec 2020 00:00:00 +0100</pubDate>
      
      <guid>https://dfrib.github.io/a-foliage-of-folly/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Can we circumvent the private access rules without relying on techniques that are considered &amp;ldquo;arcane&amp;rdquo; and likely to be made illegal (at some point)?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I recently read the article &lt;a href=&#34;https://accu.org/journals/overload/28/156/harrison%5F2776/&#34;&gt;Profiting from the Folly of Others&lt;/a&gt; by Alastair Harrison, which walks through a technique to circumvent private access rules, particularly by means of (ab)using the template instantiation mechanism together with injections of inline friend definitions. I first saw this technique used in Filip Ros√©en&amp;rsquo;s blog article series on stateful metaprogramming back in 2015, which made use of it to implement a constexpr-counter that were, if not fully, at the very least nearly&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; standard compliant. A. Harrison&amp;rsquo;s article mentions that the origin of the technique is likely two blog articles by Johannes Schaub published in 2010-2011&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Leveraging non-deduced contexts for template argument deduction</title>
      <link>https://dfrib.github.io/non-deduced-contexts/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0200</pubDate>
      
      <guid>https://dfrib.github.io/non-deduced-contexts/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;What is an example of a non-deduced context, and why can it be useful to know
about these?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The following snippet&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#ccc;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#cdcd00&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#39c&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#cdcd00&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color:#39c&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#cdcd00&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#00cdcd&#34;&gt;Foo&lt;/span&gt; { T t; };

&lt;span style=&#34;color:#cdcd00&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#39c&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#cdcd00&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color:#39c&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#00cd00&#34;&gt;void&lt;/span&gt; addToFoo(Foo&lt;span style=&#34;color:#39c&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#39c&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; foo, T val) { foo.t &lt;span style=&#34;color:#39c&#34;&gt;+=&lt;/span&gt; val; }

&lt;span style=&#34;color:#00cd00&#34;&gt;int&lt;/span&gt; main() {
    Foo&lt;span style=&#34;color:#39c&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#00cd00&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#39c&#34;&gt;&amp;gt;&lt;/span&gt; f{&lt;span style=&#34;color:#cd00cd&#34;&gt;42&lt;/span&gt;};
&lt;span style=&#34;display:block;width:100%;background-color:#191919&#34;&gt;    addToFoo(f, &lt;span style=&#34;color:#cd00cd&#34;&gt;13&lt;/span&gt;); &lt;span style=&#34;color:#000080&#34;&gt;// error: no matching function for call to &amp;#39;addToFoo&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#cdcd00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd00cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is ill-formed, as (function) template argument deduction for the dependent
function parameters &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;val&lt;/code&gt; of the &lt;code&gt;addToFoo&lt;/code&gt; function template resolves
to different, conflicting types in the &lt;code&gt;addToFoo(f, 13)&lt;/code&gt; function call.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
